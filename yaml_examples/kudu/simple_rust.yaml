run_configurations:
  "cpp-reference":
    sbatch_config:
      "nodes": 1
      "ntasks-per-node": 1
      "cpus-per-task": 1
      "exclusive": "mcs"
      "mem": 60000
    module_loads: []
    environment_variables: {}
    directory: "../0_cpp_versions/0_ref"
    build_commands:
      - "make -j 8"
    run_command: "./test_HPCCG"

  "cpp-openmp":
    sbatch_config:
      "nodes": 1
      "ntasks-per-node": 1
      "cpus-per-task": 32
      "exclusive": "mcs"
      "mem-per-cpu": 1875
    module_loads: []
    environment_variables: {}
    directory: "../0_cpp_versions/1_openmp"
    build_commands:
      - "make -j 8"
    run_command: "./test_HPCCG"

  "cpp-mpi":
    sbatch_config:
      "nodes": 2
      "ntasks-per-node": 8
      "cpus-per-task": 1
      "exclusive": "mcs"
      "mem-per-cpu": 1875
    module_loads:
      - "cs402-mpi"
    environment_variables: {}
    directory: "../0_cpp_versions/2_mpi"
    build_commands:
      - "make -j 8"
    run_command: "mpirun ./test_HPCCG"

  "rust-reference":
    sbatch_config:
      "nodes": 1
      "ntasks-per-node": 1
      "cpus-per-task": 1
      "exclusive": "mcs"
      "mem": 60000  # Rust seems to use more memory, this heavily bottlenecks if too small
    module_loads: []
    environment_variables: {}
    directory: "../5_iterators"
    build_commands:
      - "cargo build --release"
    run_command: "./target/release/hpccg-rs"

  "rust-rayon":
    sbatch_config:
      "nodes": 1
      "ntasks-per-node": 1
      "cpus-per-task": 32
      "exclusive": "mcs"
      "mem-per-cpu": 1875
    module_loads: []
    environment_variables: {}
    directory: "../6_parallel"
    build_commands:
      - "cargo build --release"
    run_command: "./target/release/hpccg-rs"

  "rust-mpi":
    sbatch_config:
      "nodes": 2
      "ntasks-per-node": 8
      "cpus-per-task": 1
      "exclusive": "mcs"
      "mem-per-cpu": 1875
    module_loads:
      - "cs402-mpi"
    environment_variables: {}
    directory: "../7_mpi"
    build_commands:
      - "cargo build --release"
    run_command: "mpirun ./target/release/hpccg-rs"


benches:
  "serial":
    enabled: False
    run_configurations:
      - "cpp-reference"
      - "rust-reference"
    matrix:
      args:
        - "25 25 25"
        - "50 50 50"
        - "75 75 75"
        - "100 100 100"
        - "150 150 150"
        - "200 200 200"
    analysis:
      metrics:
        "Mesh x size": "nx: (\\d+)"
        "Mesh y size": "ny: (\\d+)"
        "Mesh z size": "nz: (\\d+)"
        "Total time (s)": "Time Summary:[\\s\\S]*Total\\s*: ([\\d\\.]+)[\\s\\S]*\nFLOPS Summary"
        "Total flops": "FLOPS Summary:[\\s\\S]*Total\\s*: ([\\d\\.]+)[\\s\\S]*\nMFLOPS Summary"
        "Total mflops": "MFLOPS Summary:[\\s\\S]*Total\\s*: ([\\d\\.]+)"
        "Wall time (s)": "real\\s([\\d\\.]+)\nuser"
      line_plots:
        - title: "Reference Implementation Comparison"
          x: "Mesh x size"
          y: "Wall time (s)"

  "parallel":
    enabled: False
    run_configurations:
      - "cpp-openmp"
      - "rust-rayon"
    matrix:
      args:
        - "50 50 50"
        - "100 100 100"
        - "200 200 200"
        - "300 300 300"
      environment_variables:
        - {"OMP_NUM_THREADS": 1, "RAYON_NUM_THREADS": 1}
        - {"OMP_NUM_THREADS": 16, "RAYON_NUM_THREADS": 16}
        - {"OMP_NUM_THREADS": 32, "RAYON_NUM_THREADS": 32}
    analysis:
      metrics:
        "Mesh x size": "nx: (\\d+)"
        "Mesh y size": "ny: (\\d+)"
        "Mesh z size": "nz: (\\d+)"
        "Total time (s)": "Time Summary:[\\s\\S]*Total\\s*: ([\\d\\.]+)[\\s\\S]*\nFLOPS Summary"
        "Total flops": "FLOPS Summary:[\\s\\S]*Total\\s*: ([\\d\\.]+)[\\s\\S]*\nMFLOPS Summary"
        "Total mflops": "MFLOPS Summary:[\\s\\S]*Total\\s*: ([\\d\\.]+)"
        "Wall time (s)": "real\\s([\\d\\.]+)\nuser"
      line_plots:
        - title: "Parallel Implementation Comparison"
          x: "Mesh x size"
          y: "Wall time (s)"


  "mpi-single-node-config-sweep":
    run_configurations:
      - "cpp-mpi"
      - "rust-mpi"
    matrix:
      args:
        - "100 100 100"
      # [sbatch_config, environment_variables]:
      #   - [{"ntasks-per-node": 1}, {"OMP_NUM_THREADS": 40}]  ## TODO: Figure out best for one MPI node, then duplicate across many
      #   - [{"ntasks-per-node": 2}, {"OMP_NUM_THREADS": 20}]
      #   - [{"ntasks-per-node": 4}, {"OMP_NUM_THREADS": 10}]
      #   - [{"ntasks-per-node": 10}, {"OMP_NUM_THREADS": 4}]
      #   - [{"ntasks-per-node": 20}, {"OMP_NUM_THREADS": 2}]
      #   - [{"ntasks-per-node": 40}, {"OMP_NUM_THREADS": 1}]
    analysis:
      metrics:
        "Mesh x size": "nx: (\\d+)"
        "Mesh y size": "ny: (\\d+)"
        "Mesh z size": "nz: (\\d+)"
        "Total time (s)": "Time Summary:[\\s\\S]*Total\\s*: ([\\d\\.]+)[\\s\\S]*\nFLOPS Summary"
        "Total flops": "FLOPS Summary:[\\s\\S]*Total\\s*: ([\\d\\.]+)[\\s\\S]*\nMFLOPS Summary"
        "Total mflops": "MFLOPS Summary:[\\s\\S]*Total\\s*: ([\\d\\.]+)"
        "Wall time (s)": "real\\s([\\d\\.]+)\nuser"
      line_plots:
        - title: "Parallel Implementation Comparison"
          x: "Mesh x size"
          y: "Wall time (s)"
